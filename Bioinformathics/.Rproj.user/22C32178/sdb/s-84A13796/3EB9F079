{
    "contents" : "#!/usr/bin/env Rscript\n##################\n## Jordy Coolen ##\n##  09-12-2014  ##\n##################\n\n#Usage: Validation.R [-h] -i INPUTFILENAME -g GROUPFILE -w WORKINGDIR \n#       -o OUTPUTDIR [-d {ALL,TAIR10}] [-O {ALL,MF,CC,BP}] [-G]\n\n#source(\"http://bioconductor.org/biocLite.R\")\n#biocLite(\"biomaRt\")\n\n# Load argparse library to be able to parse input arguments\nsuppressPackageStartupMessages(library(\"argparse\"))\n\n# Description for the user\ndescription = 'Description: This Script uses htseq output hittable and will perform \\\\\nstatistics and GO enrichment. \\\\\n## Author: Jordy Coolen ##\\\\\nDate: 09-12-2014 ##'\n\n# create parser object\nparser <- ArgumentParser(description=description)\n\n# Arguments that can be used to pass\nparser$add_argument(\"-i\", \"--input\", type=\"character\", required=TRUE,\n                    help=\"Input name of file, if -C/--Cuffdiff is given then this should be the cuffdiff output dir\")\nparser$add_argument(\"-g\", \"--groupfile\", type=\"character\",\n                    help=\"Provide a group file with 3 columns first name of header in hittable, second Samplename,\\\\\n                    third the Condition.\")\nparser$add_argument(\"-w\", \"--workingdir\", type=\"character\", required=TRUE,\n                    help=\"Working directory where files are stored (Give full path with / at end)\")\nparser$add_argument(\"-o\", \"--outputdir\", type=\"character\", required=TRUE,\n                    help=\"Output directory where all plots and output will be stored (Give full path with / at end)\")\nparser$add_argument(\"-d\", \"--db\", type=\"character\", default=\"ALL\", choices=c(\"ALL\",\"TAIR10\"),\n                    help=\"Select the GO database to get arabidopsis thaliana GO annotation\")\nparser$add_argument(\"-O\", \"--GeneOntology\", default=\"ALL\",\n                    choices=c(\"ALL\",\"MF\",\"CC\",\"BP\"),\n                    help=\"The type of ontololy to run\")\nparser$add_argument(\"-G\", \"--Graphs\", action=\"store_true\", default=FALSE,\n                    help=\"To produce GO graphs, when given GO graphs will be produced,\\\\\n                    only when -T/--TopGO is given.\")\nparser$add_argument(\"-C\", \"--Cuffdiff\", action=\"store_true\", default=FALSE,\n                    help=\"When given it will assume that the inputfilename is the location of a\\\\\n                    cuffpack output\")\nparser$add_argument(\"-T\", \"--TopGO\", action=\"store_true\", default=FALSE,\n                    help=\"When given it will perform TopGo enrichment.\")\n\n# Saving all parameters in args\nargs <- parser$parse_args()\n\n# Saving parameters to variables\nworkingdir = args$workingdir\ninput = args$input\ngroupfile = args$groupfile\ndb = args$db\nif (args$GeneOntology == \"ALL\"){\n  ontologylist=c(\"MF\",\"BP\",\"CC\")\n}else{\n  ontologylist=args$GeneOntology\n}\nGraphs=args$Graphs\noutputdir = args$outputdir\nCuffdiff = args$Cuffdiff\nGO_run = args$TopGO\ndir.create(outputdir)\n\nprint(\"#### Starting ####\")\n\n# Source and loading DESeq2\n#source(\"http://bioconductor.org/biocLite.R\")\n#biocLite(\"DESeq2\")\n\n# Load DESeq2\nsuppressPackageStartupMessages(library(DESeq2))\n\n# Load all the functions\nsource('functions.R')\n\n# Part only used for HTseq output\nif(Cuffdiff == FALSE){\n  \n  print(\"#### Loading hittable in R ####\")\n  # Load htseqoutput into R and order colnames\n  table.summary <- load.htseqoutput(input)\n  table.summary <- table.summary[,order(colnames(table.summary))]\n  \n  # Make all pairwise comparison scatterplot\n  plot_all_pairwise_combinations(table.summary = table.summary, outputdir = outputdir)\n  \n  # Load the group file for HTseq\n  groupfile = read.table(file=groupfile, sep='\\t', header=TRUE, \n                         stringsAsFactors=FALSE, row.names = 1)\n  groupfile <- groupfile[order(rownames(groupfile)),]\n  \n  # Make the DESeq object\n  colData <- data.frame(condition=factor(groupfile$Condition))\n  dds <- DESeqDataSetFromMatrix(table.summary, colData, formula(~ condition))\n  colnames(dds)=groupfile$Samplename\n  \n  print(\"#### Performing DESeq2 Normalization ####\")\n  ## Normalize using DESeq2 on default settings\n  dds <- DESeq(dds)\n  \n  # Number of genes total\n  Total_genes_list = rownames(dds)\n  print(paste0('Number of input genes: ',length(Total_genes_list)))\n  \n  # Running function to create a sample vs sample heatmap and a top 30 genes\n  # heatmap from a DESeq2 object that is normalized\n  print(\"#### Creating sample_vs_sample heatmap and Top 30 heatmap ####\")\n  Heatmap_dds(DESeq2_object = dds, outputdir = outputdir)\n  \n  # Perform the comparison and make a result table\n  res_W1_S1 <- results(dds, contrast=c(\"condition\",\"S1\",\"W1\"))\n  res_S1_S3 <- results(dds, contrast=c(\"condition\",\"S3\",\"S1\"))\n  \n  save.image()\n  \n  # Remove NA from results table\n  res_W1_S1@listData <- rapply( res_W1_S1@listData, f=function(x) ifelse(is.na(x),0,x), how=\"replace\" )    \n  res_S1_S3@listData <- rapply( res_S1_S3@listData, f=function(x) ifelse(is.na(x),0,x), how=\"replace\" )\n  \n  # Get results of significant genes\n  # Dehydration response = res_W1_S1_padj\n  res_W1_S1_padj = res_W1_S1[res_W1_S1$padj <= 0.05 & abs(res_W1_S1$log2FoldChange) >= 1,] \n  res_S1_S3_padj = res_S1_S3[res_S1_S3$padj <= 0.05 & abs(res_S1_S3$log2FoldChange) >= 1,]\n  \n  print(\"#### Making 2logfold MA plots ####\")\n  # Plot the 2logfold data with red dots as padjusted from 0.05\n  pdf(file=paste0(outputdir,'2logfold_data_plots.pdf'))\n  plotMA(res_W1_S1,main=\"W1_vs_S1\", alpha=0.05)\n  plotMA(res_S1_S3,main=\"S1_vs_S3\", alpha=0.05)\n  dev.off()\n  \n  print(\"#### Making 2logfold MA plots significant ####\")\n  # Significant genes volcano plot\n  pdf(file=paste0(outputdir,'2logfold_data_plots_significant.pdf'))\n  plotMA(res_W1_S1_padj,main=\"W1_vs_S1\", alpha=0.05)\n  plotMA(res_S1_S3_padj,main=\"S1_vs_S3\", alpha=0.05)\n  dev.off()\n  \n  # Run the function to identify memory genes and returns a class\n  # object containing the memory genes in a data.frame and the grouping\n  # in a dataframe\n  print(\"#### Getting all the gene types, Memory genes etc. ####\")\n  Gene_types_Class = Identify.gene.types.HTseq(res_W1_S1, res_S1_S3, res_W1_S1_padj, res_S1_S3_padj)\n}else{\n  # Using readCufflinks to read the cuffdiff output\n  print(\"#### Loading cuffdiff output data ####\")\n  suppressPackageStartupMessages(library(cummeRbund))\n  cuff_data <- readCufflinks(dir=input, gtfFile = 'genes.gtf', genome = 'TAIR10', rebuild = T)\n  \n  #Pull out all genes from the cuffdiff output\n  gene_diff_data <- diffData(genes(cuff_data))\n  \n  # Number of genes total\n  Total_genes_list = unique(gene_diff_data$gene_id)\n  print(paste0('Number of input genes: ',length(Total_genes_list)))\n  \n  # Run the function to identify memory genes and returns a class\n  # object containing the memory genes in a data.frame and the grouping\n  # in a dataframe\n  print(\"#### Getting all the gene types, Memory genes etc. ####\")\n  Gene_types_Class = Identify.gene.types.cummeRbund(gene_diff_data, 'w', 's1', 's1', 's3')\n}\n\nprint(\"#### Making plot of groups of Memory genes ####\")\n# Plotting the groups of memory genes in scatterplot\nsuppressPackageStartupMessages(library(ggplot2))\npdf(file=paste0(outputdir,'Groups_of_significant_genes.pdf'))\nqplot(log2FoldChange.x, log2FoldChange.y, \n      colour = Type, data = Gene_types_Class@Memory_genes, \n      xlab = \"W1_vs_S1 [log2FoldChange]\", ylab = \"S1_vs_S3  [log2FoldChange]\",\n      main = \"Memory genes plot\")\ndev.off()\n\n# Create the a vector file for all the memory matrices/genes which can be used\n# for GO enrichment\nPP = produce.gene.bin.sig.vector(Total_genes_list, Gene_types_Class@plus_plus, \"Genes\")\nMM = produce.gene.bin.sig.vector(Total_genes_list, Gene_types_Class@min_min, \"Genes\")\nPM = produce.gene.bin.sig.vector(Total_genes_list, Gene_types_Class@plus_min, \"Genes\")\nMP = produce.gene.bin.sig.vector(Total_genes_list, Gene_types_Class@min_plus, \"Genes\")\nL_EM = produce.gene.bin.sig.vector(Total_genes_list, Gene_types_Class@Late_equal_min, \"Genes\")\nL_EP = produce.gene.bin.sig.vector(Total_genes_list, Gene_types_Class@Late_equal_plus, \"Genes\")\nN_ME = produce.gene.bin.sig.vector(Total_genes_list, Gene_types_Class@None_min_equal, \"Genes\")\nN_PE = produce.gene.bin.sig.vector(Total_genes_list, Gene_types_Class@None_plus_equal, \"Genes\")\n\n# Create list of all the gene_bin_sig_vectors\nlist_vectors = c('PP', 'MM', 'PM', 'MP', 'L_EM', 'L_EP', 'N_ME', 'N_PE')\n\n# Save results per gene type to disc\nfor (x in names(getSlots(\"Gene_types\"))){\n  # Get all dataframes from class\n  dataframe=slot(Gene_types_Class,x)\n  # Write all dataframes to the disc\n  write.table(dataframe, file = paste0(outputdir,x,'.txt'), sep = '\\t', row.names=FALSE)\n}\n\n# Making result table for either HTseq output or from cuffdiff\nif(Cuffdiff == FALSE){\n  # Make result table of all the gene types\n  Result_table = make_result_table(Total_genes_list, Gene_types_Class, res_W1_S1_padj, res_S1_S3_padj)\n}else{\n  Result_table = make_result_table(Total_genes_list, Gene_types_Class, \n                                   Gene_types_Class@Comparison_sig_genes_1, Gene_types_Class@Comparison_sig_genes_2)\n}\n\n# Save result table to disc\nwrite.table(Result_table, file = paste0(outputdir,'Result_table.txt'), sep='\\t', row.names=FALSE)\n\n# If loop for running the topGO enrichment or don't run it\nif(GO_run == TRUE){\n  print(\"#### Getting gene to GO annotation ####\")\n  ## Get TAIR annotations\n  gene2GOs = get.GO.TAIR.annotation()\n  \n  # A for loop that is performing all the GO enrichments on the memory genes\n  for (gene_type in list_vectors){\n    topGO.enrichment(get(gene_type), gene2GOs, ontologylist=ontologylist, graphs=Graphs, numbertoplot=25,\n                     workingdir=workingdir, outputdir=paste0(outputdir,'GO_enrichment/',gene_type))\n  } \n}\n\n\n\n\n# Saving .RData\nsave.image(paste0(outputdir,\".RData\"))\n\nprint(paste0(\"#### Files are saved in: \",outputdir,\" ####\"))\nprint(paste0(\"#### Finished ####\"))\n",
    "created" : 1418213474683.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1096800887",
    "id" : "3EB9F079",
    "lastKnownWriteTime" : 1418213410,
    "path" : "D:/OneDrive/Advanced bioinf/project/Norm_clust_GO/Validation.R",
    "project_path" : null,
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}